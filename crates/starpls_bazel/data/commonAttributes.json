{
    "build": [
        {
            "name": "name",
            "type": "string",
            "doc": "A unique name for this target.",
            "default_value": "",
            "is_mandatory": true
        },
        {
            "name": "compatible_with",
            "type": "List of Labels",
            "doc": "The list of environments this target can be built for, in addition to default-supported environments.\n\nThis is part of Bazel's constraint system, which lets users declare which targets can and cannot depend on each other. For example, externally deployable binaries shouldn't depend on libraries with company-secret code. See ConstraintSemantics for details.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "deprecation",
            "type": "string",
            "doc": "An explanatory warning message associated with this target. Typically this is used to notify users that a target has become obsolete, or has become superseded by another rule, is private to a package, or is perhaps considered harmful for some reason. It is a good idea to include some reference (like a webpage, a bug number or example migration CLs) so that one can easily find out what changes are required to avoid the message. If there is a new target that can be used as a drop in replacement, it is a good idea to just migrate all users of the old target.\n\nThis attribute has no effect on the way things are built, but it may affect a build tool's diagnostic output. The build tool issues a warning when a rule with a deprecation attribute is depended upon by a target in another package.\n\nIntra-package dependencies are exempt from this warning, so that, for example, building the tests of a deprecated rule does not encounter a warning.\n\nIf a deprecated target depends on another deprecated target, no warning message is issued.\n\nOnce people have stopped using it, the target can be removed.",
            "default_value": "None",
            "is_mandatory": false
        },
        {
            "name": "distribs",
            "type": "List of strings",
            "doc": "A list of distribution-method strings to be used for this particular target. This is part of a deprecated licensing API that Bazel no longer uses. Don't use this.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "exec_compatible_with",
            "type": "List of Labels",
            "doc": "A list of <code>constraint_values</code> that must be present in the execution platform for this target. This is in addition to any constraints already set by the rule type. Constraints are used to restrict the list of available execution platforms. For more details, see the description of toolchain resolution.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "exec_properties",
            "type": "Dictionary of strings",
            "doc": "A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the platform rule.\n\nIf a key is present in both the platform and target-level properties, the value will be taken from the target.",
            "default_value": "{}",
            "is_mandatory": false
        },
        {
            "name": "features",
            "type": "List of strings",
            "doc": "A feature is string tag that can be enabled or disabled on a target. The meaning of a feature depends on the rule itself.\n\nThis <code>features</code> attribute is combined with the package level <code>features</code> attribute. For example, if the features [\"a\", \"b\"] are enabled on the package level, and a target's <code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the rule will be \"b\" and \"c\". See example.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "restricted_to",
            "type": "List of Labels",
            "doc": "The list of environments this target can be built for, instead of default-supported environments.\n\nThis is part of Bazel's constraint system. See <code>compatible_with</code> for details.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "tags",
            "type": "List of strings",
            "doc": "Tags can be used on any rule. Tags on test and <code>test_suite</code> rules are useful for categorizing the tests. Tags on non-test targets are used to control sandboxed execution of <code>genrule</code>s and Starlark actions, and for parsing by humans and/or external tools.\n\nBazel modifies the behavior of its sandboxing code if it finds the following keywords in the <code>tags</code> attribute of any test or <code>genrule</code> target, or the keys of <code>execution_requirements</code> for any Starlark action.\n\n- <code>no-sandbox</code> keyword results in the action or test never being sandboxed; it can still be cached or run remotely - use <code>no-cache</code> or <code>no-remote</code> to prevent either or both of those.\n\n- <code>no-cache</code> keyword results in the action or test never being cached (locally or remotely). Note: for the purposes of this tag, the disk cache is considered a local cache, whereas the HTTP and gRPC caches are considered remote. Other caches, such as Skyframe or the persistent action cache, are not affected.\n\n- <code>no-remote-cache</code> keyword results in the action or test never being cached remotely (but it may be cached locally; it may also be executed remotely). Note: for the purposes of this tag, the disk cache is considered a local cache, whereas the HTTP and gRPC caches are considered remote. Other caches, such as Skyframe or the persistent action cache, are not affected. If a combination of local disk cache and remote cache are used (combined cache), it's treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code> is set in which case the local components will be used.\n\n- <code>no-remote-exec</code> keyword results in the action or test never being executed remotely (but it may be cached remotely).\n\n- <code>no-remote</code> keyword prevents the action or test from being executed remotely or cached remotely. This is equivalent to using both <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n\n- <code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn. it does not disable remote execution.\n\n- <code>local</code> keyword precludes the action or test from being remotely cached, remotely executed, or run inside the sandbox. For genrules and tests, marking the rule with the <code>local = True</code> attribute has the same effect.\n\n- <code>requires-network</code> keyword allows access to the external network from inside the sandbox. This tag only has an effect if sandboxing is enabled.\n\n- <code>block-network</code> keyword blocks access to the external network from inside the sandbox. In this case, only communication with localhost is allowed. This tag only has an effect if sandboxing is enabled.\n\n- <code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root user). This is only supported on Linux. This tag takes precedence over the <code>--sandbox_fake_username</code> command-line option.\n\nTags on tests are generally used to annotate a test's role in your debug and release process. Typically, tags are most useful for C++ and Python tests, which lack any runtime annotation ability. The use of tags and size elements gives flexibility in assembling suites of tests based around codebase check-in policy.\n\nBazel modifies test running behavior if it finds the following keywords in the <code>tags</code> attribute of the test rule:\n\n- <code>exclusive</code> will force the test to be run in the \"exclusive\" mode, ensuring that no other tests are running at the same time. Such tests will be executed in serial fashion after all build activity and non-exclusive tests have been completed. Remote execution is disabled for such tests because Bazel doesn't have control over what's running on a remote machine.\n\n- <code>exclusive-if-local</code> will force the test to be run in the \"exclusive\" mode if it is executed locally, but will run the test in parallel if it's executed remotely.\n\n- <code>manual</code> keyword will exclude the target from expansion of target pattern wildcards (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules which do not list the test explicitly when computing the set of top-level targets to build/run for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not affect target wildcard or test suite expansion in other contexts, including the <code>query</code> command. Note that manual does not imply that a target should not be built/run automatically by continuous build/test systems. For example, it may be desirable to exclude a target from <code>bazel test ...</code> because it requires specific Bazel flags, but still have it included in properly-configured presubmit or continuous test runs.\n\n- <code>external</code> keyword will force test to be unconditionally executed (regardless of <code>--cache_test_results</code> value).\n\nSee Tag Conventions in the Test Encyclopedia for more conventions on tags attached to test targets.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "target_compatible_with",
            "type": "List of Labels",
            "doc": "A list of <code>constraint_values</code> that must be present in the target platform for this target to be considered compatible. This is in addition to any constraints already set by the rule type. If the target platform does not satisfy all listed constraints then the target is considered incompatible. Incompatible targets are skipped for building and testing when the target pattern is expanded (e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the command line, incompatible targets cause Bazel to print an error and cause a build or test failure.\n\nTargets that transitively depend on incompatible targets are themselves considered incompatible. They are also skipped for building and testing.\n\nAn empty list (which is the default) signifies that the target is compatible with all platforms.\n\nAll rules other than Workspace Rules support this attribute. For some rules this attribute has no effect. For example, specifying <code>target_compatible_with</code> for a <code>cc_toolchain</code> is not useful.\n\nSee the Platforms page for more information about incompatible target skipping.",
            "default_value": "[]",
            "is_mandatory": false
        },
        {
            "name": "testonly",
            "type": "boolean",
            "doc": "If <code>True</code>, only testonly targets (such as tests) can depend on this target.\n\nEquivalently, a rule that is not <code>testonly</code> is not allowed to depend on any rule that is <code>testonly</code>.\n\nTests (<code>*_test</code> rules) and test suites (test_suite rules) are <code>testonly</code> by default.\n\nThis attribute is intended to mean that the target should not be contained in binaries that are released to production.\n\nBecause testonly is enforced at build time, not run time, and propagates virally through the dependency tree, it should be applied judiciously. For example, stubs and fakes that are useful for unit tests may also be useful for integration tests involving the same binaries that will be released to production, and therefore should probably not be marked testonly. Conversely, rules that are dangerous to even link in, perhaps because they unconditionally override normal behavior, should definitely be marked testonly.",
            "default_value": "",
            "is_mandatory": false
        },
        {
            "name": "toolchains",
            "type": "List of Labels",
            "doc": "The set of targets whose Make variables this target is allowed to access. These targets are either instances of rules that provide <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These include:\n\n- <code>@bazel_tools//tools/cpp:current_cc_toolchain</code>\n\n- <code>@bazel_tools//tools/jdk:current_java_runtime</code>\n\nNote that this is distinct from the concept of toolchain resolution that is used by rule implementations for platform-dependent configuration. You cannot use this attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a target will use.",
            "default_value": "",
            "is_mandatory": false
        },
        {
            "name": "visibility",
            "type": "List of Labels",
            "doc": "The <code>visibility</code> attribute on a target controls whether the target can be used in other packages. See the documentation for visibility.",
            "default_value": "//visibility:private",
            "is_mandatory": false
        }
    ]
}