{
    "builtins": [
        {
            "name": "bind",
            "doc": "DEPRECATED: see Consider removing bind for a long discussion of its issues and alternatives. <code>bind()</code> is not be available in Bzlmod.\nGives a target an alias in the <code>//external</code> package.",
            "callable": {
                "params": [
                    {
                        "name": "name",
                        "type": "string",
                        "doc": "The label under <code>//external</code> to serve as the alias name",
                        "default_value": "",
                        "is_mandatory": true,
                        "is_star_arg": false,
                        "is_star_star_arg": false
                    },
                    {
                        "name": "actual",
                        "type": "string; or None",
                        "doc": "The real label to be aliased",
                        "default_value": "None",
                        "is_mandatory": false,
                        "is_star_arg": false,
                        "is_star_star_arg": false
                    }
                ],
                "return_type": "None"
            }
        },
        {
            "name": "register_execution_platforms",
            "doc": "Register an already-defined platform so that Bazel can use it as an execution platform during toolchain resolution.",
            "callable": {
                "params": [
                    {
                        "name": "platform_labels",
                        "type": "sequence of strings",
                        "doc": "The labels of the platforms to register.",
                        "default_value": "",
                        "is_mandatory": false,
                        "is_star_arg": true,
                        "is_star_star_arg": false
                    }
                ],
                "return_type": "None"
            }
        },
        {
            "name": "register_toolchains",
            "doc": "Register an already-defined toolchain so that Bazel can use it during toolchain resolution. See examples of defining and registering toolchains.",
            "callable": {
                "params": [
                    {
                        "name": "toolchain_labels",
                        "type": "sequence of strings",
                        "doc": "The labels of the toolchains to register. Labels can include <code>:all</code>, in which case, all toolchain-providing targets in the package will be registered in lexicographical order by name.",
                        "default_value": "",
                        "is_mandatory": false,
                        "is_star_arg": true,
                        "is_star_star_arg": false
                    }
                ],
                "return_type": "None"
            }
        },
        {
            "name": "workspace",
            "doc": "This function can only be used in a <code>WORKSPACE</code> file and must be declared before all other functions in the <code>WORKSPACE</code> file. Each <code>WORKSPACE</code> file should have a <code>workspace</code> function.\n\nSets the name for this workspace. Workspace names should be a Java-package-style description of the project, using underscores as separators, e.g., github.com/bazelbuild/bazel should use com_github_bazelbuild_bazel.\n\nThis name is used for the directory that the repository's runfiles are stored in. For example, if there is a runfile <code>foo/bar</code> in the local repository and the WORKSPACE file contains <code>workspace(name = 'baz')</code>, then the runfile will be available under <code>mytarget.runfiles/baz/foo/bar</code>. If no workspace name is specified, then the runfile will be symlinked to <code>bar.runfiles/foo/bar.</code>\n\nRemote repository rule names must be valid workspace names. For example, you could have <code>maven_jar(name = 'foo')</code>, but not <code>maven_jar(name = 'foo%bar')</code>, as Bazel would attempt to write a WORKSPACE file for the <code>maven_jar</code> containing <code>workspace(name = 'foo%bar')</code>.",
            "callable": {
                "params": [
                    {
                        "name": "name",
                        "type": "string",
                        "doc": "the name of the workspace. Names must start with a letter and can only contain letters, numbers, underscores, dashes, and dots.",
                        "default_value": "",
                        "is_mandatory": true,
                        "is_star_arg": false,
                        "is_star_star_arg": false
                    }
                ],
                "return_type": "None"
            }
        }
    ]
}